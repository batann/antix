= Contents =
        - [[#1. Extracting Portions of a String]]
        - [[#2. Modifying Case]]
        - [[#3. Trimming Strings]]
        - [[#4. Replacing Substrings]]
        - [[#5. Dynamic Substring Extraction]]
        - [[#6. Conditional Substring Extraction]]
        - [[#7. Combining Substrings]]
        - [[#8. Extracting Filename Extensions]]
        - [[#9. Formatting Output]]
        - [[#10. Reversing Strings (Indirectly)]]

Using the substr() function in awk, you can perform a variety of operations on strings, allowing for flexible data manipulation. Below are some common use cases and examples of what you can achieve with substr():
== 1. Extracting Portions of a String ==

You can extract specific parts of a string based on start position and length.

awk

substr(string, start, length)
    Example: _Extract the first three characters._

    <code>
    echo "Hello World" | awk '{print substr($0, 1, 3)}'  # Output: Hel
</code>
== 2. Modifying Case ==

You can combine substr() with string functions to change the case of certain parts of the string.
    Example: _Capitalize the first letter and lower the rest._

    <code>
    echo "hello world" | awk '{print toupper(substr($0, 1, 1)) tolower(substr($0, 2))}'  # Output: Hello world
</code>


== 3. Trimming Strings ==

You can remove characters from the beginning or end of a string by extracting substrings.
    Example: _Remove the first character._

    <code>
    echo "Hello" | awk '{print substr($0, 2)}'  # Output: ello
</code>

== 4. Replacing Substrings ==

While substr() itself doesnâ€™t replace strings, you can create new strings based on portions of the original.
    Example: _Replace "World" with "Awk"._

    <code>
    echo "Hello World" | awk '{print substr($0, 1, 6) "Awk"}'  # Output: Hello Awk
</code>

== 5. Dynamic Substring Extraction ==

You can use variables to make dynamic substring operations based on calculated positions or lengths.
    Example: _Use length of the string._

    <code>
    echo "Hello World" | awk '{len = length($0); print substr($0, len-4)}'  # Output: orld
</code>

== 6. Conditional Substring Extraction ==

You can use if conditions to extract substrings based on specific conditions.
    Example: _Extract different parts based on the length of a string._

    <code>
    echo "Hello" | awk '{if (length($0) > 5) print substr($0, 1, 5); else print $0}'
</code>

== 7. Combining Substrings ==

You can concatenate multiple substrings to create new strings.
    Example: _Create a formatted string._

    <code>
    echo "2023-10-08" | awk -F'-' '{print "Year: " $1 ", Month: " substr($2, 1, 2) ", Day: " substr($3, 1, 2)}'
</code>

== 8. Extracting Filename Extensions ==

You can use substr() in combination with index() or length() to extract file extensions.
    Example: _Get the extension of a file._

    <code>
    echo "example.txt" | awk '{print substr($0, index($0, ".") + 1)}'  # Output: txt
</code>

== 9. Formatting Output ==

You can format strings for output, aligning them as needed.
    Example: _Padding strings._

    <code>
    echo "Test" | awk '{printf "%-10s\n", substr($0, 1, 4)}'  # Output: Test
</code>

== 10. Reversing Strings (Indirectly) ==

While substr() can't reverse strings directly, you can use it creatively to achieve that effect.
    Example: _Reverse a string._

    <code>
    echo "Hello" | awk '{for (i=length($0); i>0; i--) printf "%s", substr($0, i, 1); print ""}'
</code>

Conclusion

The substr() function is a powerful tool for string manipulation in awk, allowing you to extract, modify, and format strings flexibly. Combining it with other functions and logic can help you achieve complex text processing tasks easily. Feel free to experiment with it in your scripts to suit your needs!
